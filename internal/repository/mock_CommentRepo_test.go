// Code generated by mockery v2.30.1. DO NOT EDIT.

package repository

import (
	models "Nix_trainee_practic/internal/models"

	mock "github.com/stretchr/testify/mock"
)

// MockCommentRepo is an autogenerated mock type for the CommentRepo type
type MockCommentRepo struct {
	mock.Mock
}

type MockCommentRepo_Expecter struct {
	mock *mock.Mock
}

func (_m *MockCommentRepo) EXPECT() *MockCommentRepo_Expecter {
	return &MockCommentRepo_Expecter{mock: &_m.Mock}
}

// DeleteComment provides a mock function with given fields: id
func (_m *MockCommentRepo) DeleteComment(id int64) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(int64) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockCommentRepo_DeleteComment_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteComment'
type MockCommentRepo_DeleteComment_Call struct {
	*mock.Call
}

// DeleteComment is a helper method to define mock.On call
//   - id int64
func (_e *MockCommentRepo_Expecter) DeleteComment(id interface{}) *MockCommentRepo_DeleteComment_Call {
	return &MockCommentRepo_DeleteComment_Call{Call: _e.mock.On("DeleteComment", id)}
}

func (_c *MockCommentRepo_DeleteComment_Call) Run(run func(id int64)) *MockCommentRepo_DeleteComment_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int64))
	})
	return _c
}

func (_c *MockCommentRepo_DeleteComment_Call) Return(_a0 error) *MockCommentRepo_DeleteComment_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockCommentRepo_DeleteComment_Call) RunAndReturn(run func(int64) error) *MockCommentRepo_DeleteComment_Call {
	_c.Call.Return(run)
	return _c
}

// GetComment provides a mock function with given fields: id
func (_m *MockCommentRepo) GetComment(id int64) (models.Comment, error) {
	ret := _m.Called(id)

	var r0 models.Comment
	var r1 error
	if rf, ok := ret.Get(0).(func(int64) (models.Comment, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(int64) models.Comment); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(models.Comment)
	}

	if rf, ok := ret.Get(1).(func(int64) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCommentRepo_GetComment_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetComment'
type MockCommentRepo_GetComment_Call struct {
	*mock.Call
}

// GetComment is a helper method to define mock.On call
//   - id int64
func (_e *MockCommentRepo_Expecter) GetComment(id interface{}) *MockCommentRepo_GetComment_Call {
	return &MockCommentRepo_GetComment_Call{Call: _e.mock.On("GetComment", id)}
}

func (_c *MockCommentRepo_GetComment_Call) Run(run func(id int64)) *MockCommentRepo_GetComment_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int64))
	})
	return _c
}

func (_c *MockCommentRepo_GetComment_Call) Return(_a0 models.Comment, _a1 error) *MockCommentRepo_GetComment_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCommentRepo_GetComment_Call) RunAndReturn(run func(int64) (models.Comment, error)) *MockCommentRepo_GetComment_Call {
	_c.Call.Return(run)
	return _c
}

// GetCommentsByPostID provides a mock function with given fields: postID, offset
func (_m *MockCommentRepo) GetCommentsByPostID(postID int64, offset int) ([]models.Comment, error) {
	ret := _m.Called(postID, offset)

	var r0 []models.Comment
	var r1 error
	if rf, ok := ret.Get(0).(func(int64, int) ([]models.Comment, error)); ok {
		return rf(postID, offset)
	}
	if rf, ok := ret.Get(0).(func(int64, int) []models.Comment); ok {
		r0 = rf(postID, offset)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Comment)
		}
	}

	if rf, ok := ret.Get(1).(func(int64, int) error); ok {
		r1 = rf(postID, offset)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCommentRepo_GetCommentsByPostID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCommentsByPostID'
type MockCommentRepo_GetCommentsByPostID_Call struct {
	*mock.Call
}

// GetCommentsByPostID is a helper method to define mock.On call
//   - postID int64
//   - offset int
func (_e *MockCommentRepo_Expecter) GetCommentsByPostID(postID interface{}, offset interface{}) *MockCommentRepo_GetCommentsByPostID_Call {
	return &MockCommentRepo_GetCommentsByPostID_Call{Call: _e.mock.On("GetCommentsByPostID", postID, offset)}
}

func (_c *MockCommentRepo_GetCommentsByPostID_Call) Run(run func(postID int64, offset int)) *MockCommentRepo_GetCommentsByPostID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int64), args[1].(int))
	})
	return _c
}

func (_c *MockCommentRepo_GetCommentsByPostID_Call) Return(_a0 []models.Comment, _a1 error) *MockCommentRepo_GetCommentsByPostID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCommentRepo_GetCommentsByPostID_Call) RunAndReturn(run func(int64, int) ([]models.Comment, error)) *MockCommentRepo_GetCommentsByPostID_Call {
	_c.Call.Return(run)
	return _c
}

// SaveComment provides a mock function with given fields: comment
func (_m *MockCommentRepo) SaveComment(comment models.Comment) (models.Comment, error) {
	ret := _m.Called(comment)

	var r0 models.Comment
	var r1 error
	if rf, ok := ret.Get(0).(func(models.Comment) (models.Comment, error)); ok {
		return rf(comment)
	}
	if rf, ok := ret.Get(0).(func(models.Comment) models.Comment); ok {
		r0 = rf(comment)
	} else {
		r0 = ret.Get(0).(models.Comment)
	}

	if rf, ok := ret.Get(1).(func(models.Comment) error); ok {
		r1 = rf(comment)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCommentRepo_SaveComment_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SaveComment'
type MockCommentRepo_SaveComment_Call struct {
	*mock.Call
}

// SaveComment is a helper method to define mock.On call
//   - comment models.Comment
func (_e *MockCommentRepo_Expecter) SaveComment(comment interface{}) *MockCommentRepo_SaveComment_Call {
	return &MockCommentRepo_SaveComment_Call{Call: _e.mock.On("SaveComment", comment)}
}

func (_c *MockCommentRepo_SaveComment_Call) Run(run func(comment models.Comment)) *MockCommentRepo_SaveComment_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(models.Comment))
	})
	return _c
}

func (_c *MockCommentRepo_SaveComment_Call) Return(_a0 models.Comment, _a1 error) *MockCommentRepo_SaveComment_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCommentRepo_SaveComment_Call) RunAndReturn(run func(models.Comment) (models.Comment, error)) *MockCommentRepo_SaveComment_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateComment provides a mock function with given fields: comment
func (_m *MockCommentRepo) UpdateComment(comment models.Comment) (models.Comment, error) {
	ret := _m.Called(comment)

	var r0 models.Comment
	var r1 error
	if rf, ok := ret.Get(0).(func(models.Comment) (models.Comment, error)); ok {
		return rf(comment)
	}
	if rf, ok := ret.Get(0).(func(models.Comment) models.Comment); ok {
		r0 = rf(comment)
	} else {
		r0 = ret.Get(0).(models.Comment)
	}

	if rf, ok := ret.Get(1).(func(models.Comment) error); ok {
		r1 = rf(comment)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCommentRepo_UpdateComment_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateComment'
type MockCommentRepo_UpdateComment_Call struct {
	*mock.Call
}

// UpdateComment is a helper method to define mock.On call
//   - comment models.Comment
func (_e *MockCommentRepo_Expecter) UpdateComment(comment interface{}) *MockCommentRepo_UpdateComment_Call {
	return &MockCommentRepo_UpdateComment_Call{Call: _e.mock.On("UpdateComment", comment)}
}

func (_c *MockCommentRepo_UpdateComment_Call) Run(run func(comment models.Comment)) *MockCommentRepo_UpdateComment_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(models.Comment))
	})
	return _c
}

func (_c *MockCommentRepo_UpdateComment_Call) Return(_a0 models.Comment, _a1 error) *MockCommentRepo_UpdateComment_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCommentRepo_UpdateComment_Call) RunAndReturn(run func(models.Comment) (models.Comment, error)) *MockCommentRepo_UpdateComment_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockCommentRepo creates a new instance of MockCommentRepo. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockCommentRepo(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockCommentRepo {
	mock := &MockCommentRepo{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
