// Code generated by mockery v2.30.1. DO NOT EDIT.

package service

import (
	jwt "github.com/golang-jwt/jwt"
	mock "github.com/stretchr/testify/mock"

	models "Nix_trainee_practic/internal/models"

	requests "Nix_trainee_practic/internal/http/requests"
)

// MockCommentService is an autogenerated mock type for the CommentService type
type MockCommentService struct {
	mock.Mock
}

type MockCommentService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockCommentService) EXPECT() *MockCommentService_Expecter {
	return &MockCommentService_Expecter{mock: &_m.Mock}
}

// DeleteComment provides a mock function with given fields: id
func (_m *MockCommentService) DeleteComment(id int64) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(int64) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockCommentService_DeleteComment_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteComment'
type MockCommentService_DeleteComment_Call struct {
	*mock.Call
}

// DeleteComment is a helper method to define mock.On call
//   - id int64
func (_e *MockCommentService_Expecter) DeleteComment(id interface{}) *MockCommentService_DeleteComment_Call {
	return &MockCommentService_DeleteComment_Call{Call: _e.mock.On("DeleteComment", id)}
}

func (_c *MockCommentService_DeleteComment_Call) Run(run func(id int64)) *MockCommentService_DeleteComment_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int64))
	})
	return _c
}

func (_c *MockCommentService_DeleteComment_Call) Return(_a0 error) *MockCommentService_DeleteComment_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockCommentService_DeleteComment_Call) RunAndReturn(run func(int64) error) *MockCommentService_DeleteComment_Call {
	_c.Call.Return(run)
	return _c
}

// GetComment provides a mock function with given fields: id
func (_m *MockCommentService) GetComment(id int64) (models.Comment, error) {
	ret := _m.Called(id)

	var r0 models.Comment
	var r1 error
	if rf, ok := ret.Get(0).(func(int64) (models.Comment, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(int64) models.Comment); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(models.Comment)
	}

	if rf, ok := ret.Get(1).(func(int64) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCommentService_GetComment_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetComment'
type MockCommentService_GetComment_Call struct {
	*mock.Call
}

// GetComment is a helper method to define mock.On call
//   - id int64
func (_e *MockCommentService_Expecter) GetComment(id interface{}) *MockCommentService_GetComment_Call {
	return &MockCommentService_GetComment_Call{Call: _e.mock.On("GetComment", id)}
}

func (_c *MockCommentService_GetComment_Call) Run(run func(id int64)) *MockCommentService_GetComment_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int64))
	})
	return _c
}

func (_c *MockCommentService_GetComment_Call) Return(_a0 models.Comment, _a1 error) *MockCommentService_GetComment_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCommentService_GetComment_Call) RunAndReturn(run func(int64) (models.Comment, error)) *MockCommentService_GetComment_Call {
	_c.Call.Return(run)
	return _c
}

// GetCommentsByPostID provides a mock function with given fields: postID, offset
func (_m *MockCommentService) GetCommentsByPostID(postID int64, offset int) ([]models.Comment, error) {
	ret := _m.Called(postID, offset)

	var r0 []models.Comment
	var r1 error
	if rf, ok := ret.Get(0).(func(int64, int) ([]models.Comment, error)); ok {
		return rf(postID, offset)
	}
	if rf, ok := ret.Get(0).(func(int64, int) []models.Comment); ok {
		r0 = rf(postID, offset)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Comment)
		}
	}

	if rf, ok := ret.Get(1).(func(int64, int) error); ok {
		r1 = rf(postID, offset)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCommentService_GetCommentsByPostID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCommentsByPostID'
type MockCommentService_GetCommentsByPostID_Call struct {
	*mock.Call
}

// GetCommentsByPostID is a helper method to define mock.On call
//   - postID int64
//   - offset int
func (_e *MockCommentService_Expecter) GetCommentsByPostID(postID interface{}, offset interface{}) *MockCommentService_GetCommentsByPostID_Call {
	return &MockCommentService_GetCommentsByPostID_Call{Call: _e.mock.On("GetCommentsByPostID", postID, offset)}
}

func (_c *MockCommentService_GetCommentsByPostID_Call) Run(run func(postID int64, offset int)) *MockCommentService_GetCommentsByPostID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int64), args[1].(int))
	})
	return _c
}

func (_c *MockCommentService_GetCommentsByPostID_Call) Return(_a0 []models.Comment, _a1 error) *MockCommentService_GetCommentsByPostID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCommentService_GetCommentsByPostID_Call) RunAndReturn(run func(int64, int) ([]models.Comment, error)) *MockCommentService_GetCommentsByPostID_Call {
	_c.Call.Return(run)
	return _c
}

// SaveComment provides a mock function with given fields: commentRequest, postID, token
func (_m *MockCommentService) SaveComment(commentRequest requests.CommentRequest, postID int64, token *jwt.Token) (models.Comment, error) {
	ret := _m.Called(commentRequest, postID, token)

	var r0 models.Comment
	var r1 error
	if rf, ok := ret.Get(0).(func(requests.CommentRequest, int64, *jwt.Token) (models.Comment, error)); ok {
		return rf(commentRequest, postID, token)
	}
	if rf, ok := ret.Get(0).(func(requests.CommentRequest, int64, *jwt.Token) models.Comment); ok {
		r0 = rf(commentRequest, postID, token)
	} else {
		r0 = ret.Get(0).(models.Comment)
	}

	if rf, ok := ret.Get(1).(func(requests.CommentRequest, int64, *jwt.Token) error); ok {
		r1 = rf(commentRequest, postID, token)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCommentService_SaveComment_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SaveComment'
type MockCommentService_SaveComment_Call struct {
	*mock.Call
}

// SaveComment is a helper method to define mock.On call
//   - commentRequest requests.CommentRequest
//   - postID int64
//   - token *jwt.Token
func (_e *MockCommentService_Expecter) SaveComment(commentRequest interface{}, postID interface{}, token interface{}) *MockCommentService_SaveComment_Call {
	return &MockCommentService_SaveComment_Call{Call: _e.mock.On("SaveComment", commentRequest, postID, token)}
}

func (_c *MockCommentService_SaveComment_Call) Run(run func(commentRequest requests.CommentRequest, postID int64, token *jwt.Token)) *MockCommentService_SaveComment_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(requests.CommentRequest), args[1].(int64), args[2].(*jwt.Token))
	})
	return _c
}

func (_c *MockCommentService_SaveComment_Call) Return(_a0 models.Comment, _a1 error) *MockCommentService_SaveComment_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCommentService_SaveComment_Call) RunAndReturn(run func(requests.CommentRequest, int64, *jwt.Token) (models.Comment, error)) *MockCommentService_SaveComment_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateComment provides a mock function with given fields: commentRequest, id
func (_m *MockCommentService) UpdateComment(commentRequest requests.CommentRequest, id int64) (models.Comment, error) {
	ret := _m.Called(commentRequest, id)

	var r0 models.Comment
	var r1 error
	if rf, ok := ret.Get(0).(func(requests.CommentRequest, int64) (models.Comment, error)); ok {
		return rf(commentRequest, id)
	}
	if rf, ok := ret.Get(0).(func(requests.CommentRequest, int64) models.Comment); ok {
		r0 = rf(commentRequest, id)
	} else {
		r0 = ret.Get(0).(models.Comment)
	}

	if rf, ok := ret.Get(1).(func(requests.CommentRequest, int64) error); ok {
		r1 = rf(commentRequest, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCommentService_UpdateComment_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateComment'
type MockCommentService_UpdateComment_Call struct {
	*mock.Call
}

// UpdateComment is a helper method to define mock.On call
//   - commentRequest requests.CommentRequest
//   - id int64
func (_e *MockCommentService_Expecter) UpdateComment(commentRequest interface{}, id interface{}) *MockCommentService_UpdateComment_Call {
	return &MockCommentService_UpdateComment_Call{Call: _e.mock.On("UpdateComment", commentRequest, id)}
}

func (_c *MockCommentService_UpdateComment_Call) Run(run func(commentRequest requests.CommentRequest, id int64)) *MockCommentService_UpdateComment_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(requests.CommentRequest), args[1].(int64))
	})
	return _c
}

func (_c *MockCommentService_UpdateComment_Call) Return(_a0 models.Comment, _a1 error) *MockCommentService_UpdateComment_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCommentService_UpdateComment_Call) RunAndReturn(run func(requests.CommentRequest, int64) (models.Comment, error)) *MockCommentService_UpdateComment_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockCommentService creates a new instance of MockCommentService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockCommentService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockCommentService {
	mock := &MockCommentService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
