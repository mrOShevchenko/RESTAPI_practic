// Code generated by mockery v2.30.1. DO NOT EDIT.

package service

import (
	models "Nix_trainee_practic/internal/models"

	mock "github.com/stretchr/testify/mock"
)

// MockUserService is an autogenerated mock type for the UserService type
type MockUserService struct {
	mock.Mock
}

type MockUserService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockUserService) EXPECT() *MockUserService_Expecter {
	return &MockUserService_Expecter{mock: &_m.Mock}
}

// Delete provides a mock function with given fields: id
func (_m *MockUserService) Delete(id int64) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(int64) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockUserService_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MockUserService_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - id int64
func (_e *MockUserService_Expecter) Delete(id interface{}) *MockUserService_Delete_Call {
	return &MockUserService_Delete_Call{Call: _e.mock.On("Delete", id)}
}

func (_c *MockUserService_Delete_Call) Run(run func(id int64)) *MockUserService_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int64))
	})
	return _c
}

func (_c *MockUserService_Delete_Call) Return(_a0 error) *MockUserService_Delete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUserService_Delete_Call) RunAndReturn(run func(int64) error) *MockUserService_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// FindByEmail provides a mock function with given fields: email
func (_m *MockUserService) FindByEmail(email string) (models.User, error) {
	ret := _m.Called(email)

	var r0 models.User
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (models.User, error)); ok {
		return rf(email)
	}
	if rf, ok := ret.Get(0).(func(string) models.User); ok {
		r0 = rf(email)
	} else {
		r0 = ret.Get(0).(models.User)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUserService_FindByEmail_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindByEmail'
type MockUserService_FindByEmail_Call struct {
	*mock.Call
}

// FindByEmail is a helper method to define mock.On call
//   - email string
func (_e *MockUserService_Expecter) FindByEmail(email interface{}) *MockUserService_FindByEmail_Call {
	return &MockUserService_FindByEmail_Call{Call: _e.mock.On("FindByEmail", email)}
}

func (_c *MockUserService_FindByEmail_Call) Run(run func(email string)) *MockUserService_FindByEmail_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockUserService_FindByEmail_Call) Return(_a0 models.User, _a1 error) *MockUserService_FindByEmail_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockUserService_FindByEmail_Call) RunAndReturn(run func(string) (models.User, error)) *MockUserService_FindByEmail_Call {
	_c.Call.Return(run)
	return _c
}

// FindByID provides a mock function with given fields: id
func (_m *MockUserService) FindByID(id int64) (models.User, error) {
	ret := _m.Called(id)

	var r0 models.User
	var r1 error
	if rf, ok := ret.Get(0).(func(int64) (models.User, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(int64) models.User); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(models.User)
	}

	if rf, ok := ret.Get(1).(func(int64) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUserService_FindByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindByID'
type MockUserService_FindByID_Call struct {
	*mock.Call
}

// FindByID is a helper method to define mock.On call
//   - id int64
func (_e *MockUserService_Expecter) FindByID(id interface{}) *MockUserService_FindByID_Call {
	return &MockUserService_FindByID_Call{Call: _e.mock.On("FindByID", id)}
}

func (_c *MockUserService_FindByID_Call) Run(run func(id int64)) *MockUserService_FindByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int64))
	})
	return _c
}

func (_c *MockUserService_FindByID_Call) Return(_a0 models.User, _a1 error) *MockUserService_FindByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockUserService_FindByID_Call) RunAndReturn(run func(int64) (models.User, error)) *MockUserService_FindByID_Call {
	_c.Call.Return(run)
	return _c
}

// Save provides a mock function with given fields: user
func (_m *MockUserService) Save(user models.User) (models.User, error) {
	ret := _m.Called(user)

	var r0 models.User
	var r1 error
	if rf, ok := ret.Get(0).(func(models.User) (models.User, error)); ok {
		return rf(user)
	}
	if rf, ok := ret.Get(0).(func(models.User) models.User); ok {
		r0 = rf(user)
	} else {
		r0 = ret.Get(0).(models.User)
	}

	if rf, ok := ret.Get(1).(func(models.User) error); ok {
		r1 = rf(user)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUserService_Save_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Save'
type MockUserService_Save_Call struct {
	*mock.Call
}

// Save is a helper method to define mock.On call
//   - user models.User
func (_e *MockUserService_Expecter) Save(user interface{}) *MockUserService_Save_Call {
	return &MockUserService_Save_Call{Call: _e.mock.On("Save", user)}
}

func (_c *MockUserService_Save_Call) Run(run func(user models.User)) *MockUserService_Save_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(models.User))
	})
	return _c
}

func (_c *MockUserService_Save_Call) Return(_a0 models.User, _a1 error) *MockUserService_Save_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockUserService_Save_Call) RunAndReturn(run func(models.User) (models.User, error)) *MockUserService_Save_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockUserService creates a new instance of MockUserService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockUserService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockUserService {
	mock := &MockUserService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
