// Code generated by mockery v2.30.1. DO NOT EDIT.

package service

import (
	models "Nix_trainee_practic/internal/models"

	mock "github.com/stretchr/testify/mock"

	requests "Nix_trainee_practic/internal/http/requests"
)

// MockAuthService is an autogenerated mock type for the AuthService type
type MockAuthService struct {
	mock.Mock
}

type MockAuthService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockAuthService) EXPECT() *MockAuthService_Expecter {
	return &MockAuthService_Expecter{mock: &_m.Mock}
}

// Login provides a mock function with given fields: user
func (_m *MockAuthService) Login(user requests.LoginAuth) (string, string, int64, error) {
	ret := _m.Called(user)

	var r0 string
	var r1 string
	var r2 int64
	var r3 error
	if rf, ok := ret.Get(0).(func(requests.LoginAuth) (string, string, int64, error)); ok {
		return rf(user)
	}
	if rf, ok := ret.Get(0).(func(requests.LoginAuth) string); ok {
		r0 = rf(user)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(requests.LoginAuth) string); ok {
		r1 = rf(user)
	} else {
		r1 = ret.Get(1).(string)
	}

	if rf, ok := ret.Get(2).(func(requests.LoginAuth) int64); ok {
		r2 = rf(user)
	} else {
		r2 = ret.Get(2).(int64)
	}

	if rf, ok := ret.Get(3).(func(requests.LoginAuth) error); ok {
		r3 = rf(user)
	} else {
		r3 = ret.Error(3)
	}

	return r0, r1, r2, r3
}

// MockAuthService_Login_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Login'
type MockAuthService_Login_Call struct {
	*mock.Call
}

// Login is a helper method to define mock.On call
//   - user requests.LoginAuth
func (_e *MockAuthService_Expecter) Login(user interface{}) *MockAuthService_Login_Call {
	return &MockAuthService_Login_Call{Call: _e.mock.On("Login", user)}
}

func (_c *MockAuthService_Login_Call) Run(run func(user requests.LoginAuth)) *MockAuthService_Login_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(requests.LoginAuth))
	})
	return _c
}

func (_c *MockAuthService_Login_Call) Return(_a0 string, _a1 string, _a2 int64, _a3 error) *MockAuthService_Login_Call {
	_c.Call.Return(_a0, _a1, _a2, _a3)
	return _c
}

func (_c *MockAuthService_Login_Call) RunAndReturn(run func(requests.LoginAuth) (string, string, int64, error)) *MockAuthService_Login_Call {
	_c.Call.Return(run)
	return _c
}

// Register provides a mock function with given fields: user
func (_m *MockAuthService) Register(user models.User) (models.User, error) {
	ret := _m.Called(user)

	var r0 models.User
	var r1 error
	if rf, ok := ret.Get(0).(func(models.User) (models.User, error)); ok {
		return rf(user)
	}
	if rf, ok := ret.Get(0).(func(models.User) models.User); ok {
		r0 = rf(user)
	} else {
		r0 = ret.Get(0).(models.User)
	}

	if rf, ok := ret.Get(1).(func(models.User) error); ok {
		r1 = rf(user)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAuthService_Register_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Register'
type MockAuthService_Register_Call struct {
	*mock.Call
}

// Register is a helper method to define mock.On call
//   - user models.User
func (_e *MockAuthService_Expecter) Register(user interface{}) *MockAuthService_Register_Call {
	return &MockAuthService_Register_Call{Call: _e.mock.On("Register", user)}
}

func (_c *MockAuthService_Register_Call) Run(run func(user models.User)) *MockAuthService_Register_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(models.User))
	})
	return _c
}

func (_c *MockAuthService_Register_Call) Return(_a0 models.User, _a1 error) *MockAuthService_Register_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAuthService_Register_Call) RunAndReturn(run func(models.User) (models.User, error)) *MockAuthService_Register_Call {
	_c.Call.Return(run)
	return _c
}

// ValidateJWT provides a mock function with given fields: tokenUID, userID, isRefresh
func (_m *MockAuthService) ValidateJWT(tokenUID string, userID int64, isRefresh bool) (models.User, error) {
	ret := _m.Called(tokenUID, userID, isRefresh)

	var r0 models.User
	var r1 error
	if rf, ok := ret.Get(0).(func(string, int64, bool) (models.User, error)); ok {
		return rf(tokenUID, userID, isRefresh)
	}
	if rf, ok := ret.Get(0).(func(string, int64, bool) models.User); ok {
		r0 = rf(tokenUID, userID, isRefresh)
	} else {
		r0 = ret.Get(0).(models.User)
	}

	if rf, ok := ret.Get(1).(func(string, int64, bool) error); ok {
		r1 = rf(tokenUID, userID, isRefresh)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAuthService_ValidateJWT_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ValidateJWT'
type MockAuthService_ValidateJWT_Call struct {
	*mock.Call
}

// ValidateJWT is a helper method to define mock.On call
//   - tokenUID string
//   - userID int64
//   - isRefresh bool
func (_e *MockAuthService_Expecter) ValidateJWT(tokenUID interface{}, userID interface{}, isRefresh interface{}) *MockAuthService_ValidateJWT_Call {
	return &MockAuthService_ValidateJWT_Call{Call: _e.mock.On("ValidateJWT", tokenUID, userID, isRefresh)}
}

func (_c *MockAuthService_ValidateJWT_Call) Run(run func(tokenUID string, userID int64, isRefresh bool)) *MockAuthService_ValidateJWT_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(int64), args[2].(bool))
	})
	return _c
}

func (_c *MockAuthService_ValidateJWT_Call) Return(_a0 models.User, _a1 error) *MockAuthService_ValidateJWT_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAuthService_ValidateJWT_Call) RunAndReturn(run func(string, int64, bool) (models.User, error)) *MockAuthService_ValidateJWT_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockAuthService creates a new instance of MockAuthService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockAuthService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockAuthService {
	mock := &MockAuthService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
