// Code generated by mockery v2.30.1. DO NOT EDIT.

package service

import (
	jwt "github.com/golang-jwt/jwt"
	mock "github.com/stretchr/testify/mock"

	models "Nix_trainee_practic/internal/models"

	requests "Nix_trainee_practic/internal/http/requests"
)

// MockPostService is an autogenerated mock type for the PostService type
type MockPostService struct {
	mock.Mock
}

type MockPostService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockPostService) EXPECT() *MockPostService_Expecter {
	return &MockPostService_Expecter{mock: &_m.Mock}
}

// DeletePost provides a mock function with given fields: id
func (_m *MockPostService) DeletePost(id int64) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(int64) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockPostService_DeletePost_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeletePost'
type MockPostService_DeletePost_Call struct {
	*mock.Call
}

// DeletePost is a helper method to define mock.On call
//   - id int64
func (_e *MockPostService_Expecter) DeletePost(id interface{}) *MockPostService_DeletePost_Call {
	return &MockPostService_DeletePost_Call{Call: _e.mock.On("DeletePost", id)}
}

func (_c *MockPostService_DeletePost_Call) Run(run func(id int64)) *MockPostService_DeletePost_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int64))
	})
	return _c
}

func (_c *MockPostService_DeletePost_Call) Return(_a0 error) *MockPostService_DeletePost_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockPostService_DeletePost_Call) RunAndReturn(run func(int64) error) *MockPostService_DeletePost_Call {
	_c.Call.Return(run)
	return _c
}

// GetPost provides a mock function with given fields: id
func (_m *MockPostService) GetPost(id int64) (models.Post, error) {
	ret := _m.Called(id)

	var r0 models.Post
	var r1 error
	if rf, ok := ret.Get(0).(func(int64) (models.Post, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(int64) models.Post); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(models.Post)
	}

	if rf, ok := ret.Get(1).(func(int64) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockPostService_GetPost_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPost'
type MockPostService_GetPost_Call struct {
	*mock.Call
}

// GetPost is a helper method to define mock.On call
//   - id int64
func (_e *MockPostService_Expecter) GetPost(id interface{}) *MockPostService_GetPost_Call {
	return &MockPostService_GetPost_Call{Call: _e.mock.On("GetPost", id)}
}

func (_c *MockPostService_GetPost_Call) Run(run func(id int64)) *MockPostService_GetPost_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int64))
	})
	return _c
}

func (_c *MockPostService_GetPost_Call) Return(_a0 models.Post, _a1 error) *MockPostService_GetPost_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockPostService_GetPost_Call) RunAndReturn(run func(int64) (models.Post, error)) *MockPostService_GetPost_Call {
	_c.Call.Return(run)
	return _c
}

// GetPostsByUser provides a mock function with given fields: userID
func (_m *MockPostService) GetPostsByUser(userID int64) ([]models.Post, error) {
	ret := _m.Called(userID)

	var r0 []models.Post
	var r1 error
	if rf, ok := ret.Get(0).(func(int64) ([]models.Post, error)); ok {
		return rf(userID)
	}
	if rf, ok := ret.Get(0).(func(int64) []models.Post); ok {
		r0 = rf(userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Post)
		}
	}

	if rf, ok := ret.Get(1).(func(int64) error); ok {
		r1 = rf(userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockPostService_GetPostsByUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPostsByUser'
type MockPostService_GetPostsByUser_Call struct {
	*mock.Call
}

// GetPostsByUser is a helper method to define mock.On call
//   - userID int64
func (_e *MockPostService_Expecter) GetPostsByUser(userID interface{}) *MockPostService_GetPostsByUser_Call {
	return &MockPostService_GetPostsByUser_Call{Call: _e.mock.On("GetPostsByUser", userID)}
}

func (_c *MockPostService_GetPostsByUser_Call) Run(run func(userID int64)) *MockPostService_GetPostsByUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int64))
	})
	return _c
}

func (_c *MockPostService_GetPostsByUser_Call) Return(_a0 []models.Post, _a1 error) *MockPostService_GetPostsByUser_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockPostService_GetPostsByUser_Call) RunAndReturn(run func(int64) ([]models.Post, error)) *MockPostService_GetPostsByUser_Call {
	_c.Call.Return(run)
	return _c
}

// SavePost provides a mock function with given fields: postRequest, token
func (_m *MockPostService) SavePost(postRequest requests.PostRequest, token *jwt.Token) (models.Post, error) {
	ret := _m.Called(postRequest, token)

	var r0 models.Post
	var r1 error
	if rf, ok := ret.Get(0).(func(requests.PostRequest, *jwt.Token) (models.Post, error)); ok {
		return rf(postRequest, token)
	}
	if rf, ok := ret.Get(0).(func(requests.PostRequest, *jwt.Token) models.Post); ok {
		r0 = rf(postRequest, token)
	} else {
		r0 = ret.Get(0).(models.Post)
	}

	if rf, ok := ret.Get(1).(func(requests.PostRequest, *jwt.Token) error); ok {
		r1 = rf(postRequest, token)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockPostService_SavePost_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SavePost'
type MockPostService_SavePost_Call struct {
	*mock.Call
}

// SavePost is a helper method to define mock.On call
//   - postRequest requests.PostRequest
//   - token *jwt.Token
func (_e *MockPostService_Expecter) SavePost(postRequest interface{}, token interface{}) *MockPostService_SavePost_Call {
	return &MockPostService_SavePost_Call{Call: _e.mock.On("SavePost", postRequest, token)}
}

func (_c *MockPostService_SavePost_Call) Run(run func(postRequest requests.PostRequest, token *jwt.Token)) *MockPostService_SavePost_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(requests.PostRequest), args[1].(*jwt.Token))
	})
	return _c
}

func (_c *MockPostService_SavePost_Call) Return(_a0 models.Post, _a1 error) *MockPostService_SavePost_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockPostService_SavePost_Call) RunAndReturn(run func(requests.PostRequest, *jwt.Token) (models.Post, error)) *MockPostService_SavePost_Call {
	_c.Call.Return(run)
	return _c
}

// UpdatePost provides a mock function with given fields: postRequest, postID
func (_m *MockPostService) UpdatePost(postRequest requests.PostRequest, postID int64) (models.Post, error) {
	ret := _m.Called(postRequest, postID)

	var r0 models.Post
	var r1 error
	if rf, ok := ret.Get(0).(func(requests.PostRequest, int64) (models.Post, error)); ok {
		return rf(postRequest, postID)
	}
	if rf, ok := ret.Get(0).(func(requests.PostRequest, int64) models.Post); ok {
		r0 = rf(postRequest, postID)
	} else {
		r0 = ret.Get(0).(models.Post)
	}

	if rf, ok := ret.Get(1).(func(requests.PostRequest, int64) error); ok {
		r1 = rf(postRequest, postID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockPostService_UpdatePost_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdatePost'
type MockPostService_UpdatePost_Call struct {
	*mock.Call
}

// UpdatePost is a helper method to define mock.On call
//   - postRequest requests.PostRequest
//   - postID int64
func (_e *MockPostService_Expecter) UpdatePost(postRequest interface{}, postID interface{}) *MockPostService_UpdatePost_Call {
	return &MockPostService_UpdatePost_Call{Call: _e.mock.On("UpdatePost", postRequest, postID)}
}

func (_c *MockPostService_UpdatePost_Call) Run(run func(postRequest requests.PostRequest, postID int64)) *MockPostService_UpdatePost_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(requests.PostRequest), args[1].(int64))
	})
	return _c
}

func (_c *MockPostService_UpdatePost_Call) Return(_a0 models.Post, _a1 error) *MockPostService_UpdatePost_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockPostService_UpdatePost_Call) RunAndReturn(run func(requests.PostRequest, int64) (models.Post, error)) *MockPostService_UpdatePost_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockPostService creates a new instance of MockPostService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockPostService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockPostService {
	mock := &MockPostService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
