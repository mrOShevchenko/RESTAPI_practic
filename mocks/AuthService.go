// Code generated by mockery v2.30.1. DO NOT EDIT.

package mocks

import (
	models "Nix_trainee_practic/internal/models"

	mock "github.com/stretchr/testify/mock"

	requests "Nix_trainee_practic/internal/http/requests"
)

// AuthService is an autogenerated mock type for the AuthService type
type AuthService struct {
	mock.Mock
}

// Login provides a mock function with given fields: user
func (_m *AuthService) Login(user requests.LoginAuth) (string, string, int64, error) {
	ret := _m.Called(user)

	var r0 string
	var r1 string
	var r2 int64
	var r3 error
	if rf, ok := ret.Get(0).(func(requests.LoginAuth) (string, string, int64, error)); ok {
		return rf(user)
	}
	if rf, ok := ret.Get(0).(func(requests.LoginAuth) string); ok {
		r0 = rf(user)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(requests.LoginAuth) string); ok {
		r1 = rf(user)
	} else {
		r1 = ret.Get(1).(string)
	}

	if rf, ok := ret.Get(2).(func(requests.LoginAuth) int64); ok {
		r2 = rf(user)
	} else {
		r2 = ret.Get(2).(int64)
	}

	if rf, ok := ret.Get(3).(func(requests.LoginAuth) error); ok {
		r3 = rf(user)
	} else {
		r3 = ret.Error(3)
	}

	return r0, r1, r2, r3
}

// Register provides a mock function with given fields: user
func (_m *AuthService) Register(user models.User) (models.User, error) {
	ret := _m.Called(user)

	var r0 models.User
	var r1 error
	if rf, ok := ret.Get(0).(func(models.User) (models.User, error)); ok {
		return rf(user)
	}
	if rf, ok := ret.Get(0).(func(models.User) models.User); ok {
		r0 = rf(user)
	} else {
		r0 = ret.Get(0).(models.User)
	}

	if rf, ok := ret.Get(1).(func(models.User) error); ok {
		r1 = rf(user)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ValidateJWT provides a mock function with given fields: tokenUID, userID, isRefresh
func (_m *AuthService) ValidateJWT(tokenUID string, userID int64, isRefresh bool) (models.User, error) {
	ret := _m.Called(tokenUID, userID, isRefresh)

	var r0 models.User
	var r1 error
	if rf, ok := ret.Get(0).(func(string, int64, bool) (models.User, error)); ok {
		return rf(tokenUID, userID, isRefresh)
	}
	if rf, ok := ret.Get(0).(func(string, int64, bool) models.User); ok {
		r0 = rf(tokenUID, userID, isRefresh)
	} else {
		r0 = ret.Get(0).(models.User)
	}

	if rf, ok := ret.Get(1).(func(string, int64, bool) error); ok {
		r1 = rf(tokenUID, userID, isRefresh)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewAuthService creates a new instance of AuthService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAuthService(t interface {
	mock.TestingT
	Cleanup(func())
}) *AuthService {
	mock := &AuthService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
