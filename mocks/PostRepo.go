// Code generated by mockery v2.30.1. DO NOT EDIT.

package mocks

import (
	models "Nix_trainee_practic/internal/models"

	mock "github.com/stretchr/testify/mock"
)

// PostRepo is an autogenerated mock type for the PostRepo type
type PostRepo struct {
	mock.Mock
}

// DeletePost provides a mock function with given fields: id
func (_m *PostRepo) DeletePost(id int64) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(int64) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetPost provides a mock function with given fields: id
func (_m *PostRepo) GetPost(id int64) (models.Post, error) {
	ret := _m.Called(id)

	var r0 models.Post
	var r1 error
	if rf, ok := ret.Get(0).(func(int64) (models.Post, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(int64) models.Post); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(models.Post)
	}

	if rf, ok := ret.Get(1).(func(int64) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPostsByUser provides a mock function with given fields: userID
func (_m *PostRepo) GetPostsByUser(userID int64) ([]models.Post, error) {
	ret := _m.Called(userID)

	var r0 []models.Post
	var r1 error
	if rf, ok := ret.Get(0).(func(int64) ([]models.Post, error)); ok {
		return rf(userID)
	}
	if rf, ok := ret.Get(0).(func(int64) []models.Post); ok {
		r0 = rf(userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Post)
		}
	}

	if rf, ok := ret.Get(1).(func(int64) error); ok {
		r1 = rf(userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SavePost provides a mock function with given fields: post
func (_m *PostRepo) SavePost(post models.Post) (models.Post, error) {
	ret := _m.Called(post)

	var r0 models.Post
	var r1 error
	if rf, ok := ret.Get(0).(func(models.Post) (models.Post, error)); ok {
		return rf(post)
	}
	if rf, ok := ret.Get(0).(func(models.Post) models.Post); ok {
		r0 = rf(post)
	} else {
		r0 = ret.Get(0).(models.Post)
	}

	if rf, ok := ret.Get(1).(func(models.Post) error); ok {
		r1 = rf(post)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdatePost provides a mock function with given fields: post
func (_m *PostRepo) UpdatePost(post models.Post) (models.Post, error) {
	ret := _m.Called(post)

	var r0 models.Post
	var r1 error
	if rf, ok := ret.Get(0).(func(models.Post) (models.Post, error)); ok {
		return rf(post)
	}
	if rf, ok := ret.Get(0).(func(models.Post) models.Post); ok {
		r0 = rf(post)
	} else {
		r0 = ret.Get(0).(models.Post)
	}

	if rf, ok := ret.Get(1).(func(models.Post) error); ok {
		r1 = rf(post)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewPostRepo creates a new instance of PostRepo. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewPostRepo(t interface {
	mock.TestingT
	Cleanup(func())
}) *PostRepo {
	mock := &PostRepo{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
