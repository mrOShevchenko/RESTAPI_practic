// Code generated by mockery v2.30.1. DO NOT EDIT.

package middleware

import (
	echo "github.com/labstack/echo/v4"
	mock "github.com/stretchr/testify/mock"
)

// MockAuthMiddleware is an autogenerated mock type for the AuthMiddleware type
type MockAuthMiddleware struct {
	mock.Mock
}

type MockAuthMiddleware_Expecter struct {
	mock *mock.Mock
}

func (_m *MockAuthMiddleware) EXPECT() *MockAuthMiddleware_Expecter {
	return &MockAuthMiddleware_Expecter{mock: &_m.Mock}
}

// JWT provides a mock function with given fields: secret
func (_m *MockAuthMiddleware) JWT(secret string) echo.MiddlewareFunc {
	ret := _m.Called(secret)

	var r0 echo.MiddlewareFunc
	if rf, ok := ret.Get(0).(func(string) echo.MiddlewareFunc); ok {
		r0 = rf(secret)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(echo.MiddlewareFunc)
		}
	}

	return r0
}

// MockAuthMiddleware_JWT_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'JWT'
type MockAuthMiddleware_JWT_Call struct {
	*mock.Call
}

// JWT is a helper method to define mock.On call
//   - secret string
func (_e *MockAuthMiddleware_Expecter) JWT(secret interface{}) *MockAuthMiddleware_JWT_Call {
	return &MockAuthMiddleware_JWT_Call{Call: _e.mock.On("JWT", secret)}
}

func (_c *MockAuthMiddleware_JWT_Call) Run(run func(secret string)) *MockAuthMiddleware_JWT_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockAuthMiddleware_JWT_Call) Return(_a0 echo.MiddlewareFunc) *MockAuthMiddleware_JWT_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockAuthMiddleware_JWT_Call) RunAndReturn(run func(string) echo.MiddlewareFunc) *MockAuthMiddleware_JWT_Call {
	_c.Call.Return(run)
	return _c
}

// ValidateJWT provides a mock function with given fields:
func (_m *MockAuthMiddleware) ValidateJWT() echo.MiddlewareFunc {
	ret := _m.Called()

	var r0 echo.MiddlewareFunc
	if rf, ok := ret.Get(0).(func() echo.MiddlewareFunc); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(echo.MiddlewareFunc)
		}
	}

	return r0
}

// MockAuthMiddleware_ValidateJWT_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ValidateJWT'
type MockAuthMiddleware_ValidateJWT_Call struct {
	*mock.Call
}

// ValidateJWT is a helper method to define mock.On call
func (_e *MockAuthMiddleware_Expecter) ValidateJWT() *MockAuthMiddleware_ValidateJWT_Call {
	return &MockAuthMiddleware_ValidateJWT_Call{Call: _e.mock.On("ValidateJWT")}
}

func (_c *MockAuthMiddleware_ValidateJWT_Call) Run(run func()) *MockAuthMiddleware_ValidateJWT_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockAuthMiddleware_ValidateJWT_Call) Return(_a0 echo.MiddlewareFunc) *MockAuthMiddleware_ValidateJWT_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockAuthMiddleware_ValidateJWT_Call) RunAndReturn(run func() echo.MiddlewareFunc) *MockAuthMiddleware_ValidateJWT_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockAuthMiddleware creates a new instance of MockAuthMiddleware. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockAuthMiddleware(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockAuthMiddleware {
	mock := &MockAuthMiddleware{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
